generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id
  name                String
  email               String           @unique
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  generationsUsed     Int              @default(0)
  lastResetDate       DateTime         @default(now())
  freeGenerationsUsed Int              @default(0)
  accounts            Account[]
  GeneratedImage      GeneratedImage[]
  sessions            Session[]
  subscription        Subscription?
  trainings           TrainingRecord[]
  uploadedImages      UploadedImage[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TrainingRecord {
  id             String           @id
  userId         String
  status         String
  version        String?
  replicateId    String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  error          String?
  sex            String           @default("male")
  GeneratedImage GeneratedImage[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedImages UploadedImage[]

  @@map("training_record")
}

model UploadedImage {
  id                String          @id @default(cuid())
  userId            String
  trainingId        String?
  filename          String
  blobUrl           String
  contentType       String
  size              Int
  createdAt         DateTime        @default(now())
  processingStatus  String          @default("pending")
  uploadBatchId     String?
  trainingSessionId String?
  training          TrainingRecord? @relation(fields: [trainingId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("uploaded_image")
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Int
  currency      String         @default("usd")
  interval      String         @default("month")
  stripePriceId String         @unique
  features      Json
  generations   Int
  isActive      Boolean        @default(true)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plan")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  status               String
  planId               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  generationsUsed      Int      @default(0)
  lastResetDate        DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan     @relation(fields: [planId], references: [id])
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model GeneratedImage {
  id           String          @id @default(cuid())
  userId       String
  prompt       String
  imageUrl     String
  originalUrl  String
  trainingId   String?
  modelVersion String?
  createdAt    DateTime        @default(now())
  training     TrainingRecord? @relation(fields: [trainingId], references: [id])
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_image")
}

model Prompt {
  id              String   @id @default(cuid())
  prompt          String
  width           Int?
  height          Int?
  seed            Int      @default(1)
  createdAt       DateTime @default(now())
  isStarterPrompt Boolean  @default(false)
  sex             String

  @@map("prompt")
}
